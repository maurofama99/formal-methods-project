<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int NUM_PIECES = 3; 
const int NUM_OUT_SENSORS = 2;
const int NUM_SLOTS = 88;
const int GATE_POS = 11;
const int FIRST_POS_BELT2 = 29;
const int LAST_POS_BELT2 = 42;


/** Change this to modify number of stations and input sensors **/
            const int NUM_STATIONS = 3;
            const int NUM_IN_SENSORS = 3;
/****************************************************************/

typedef int[0, NUM_STATIONS-1] id_s;
typedef int[0, NUM_IN_SENSORS-1] id_sens;
typedef int[0, NUM_OUT_SENSORS-1] id_outsens;

bool belt[NUM_SLOTS];
int stations[NUM_SLOTS];
int in_sensors[NUM_SLOTS];
int out_sensors[NUM_SLOTS];
int preprocessing[NUM_SLOTS];

bool status_in_sensors[NUM_IN_SENSORS];
bool status_stations[NUM_STATIONS];
bool status_preprocessing[NUM_STATIONS];

chan enter_preprocessing[NUM_STATIONS], free_in_sensor[NUM_IN_SENSORS], check_outsensor[NUM_IN_SENSORS], busy[NUM_OUT_SENSORS], free[NUM_OUT_SENSORS];
broadcast chan initialize, step;

int max_len_queue[NUM_STATIONS];
int len_queue[NUM_STATIONS];

int belt_count;

void update_belt_count() {
    int i;
    belt_count = 0;
    for (i = 0; i &lt; NUM_SLOTS; i++) {
        if (belt[i]) {
        belt_count++;
        }
    }
}

void initializer() {

int i;

    out_sensors[57] = 1;
    in_sensors[63] = 1;
    stations[68] = 1;

    out_sensors[72] = 2;
    in_sensors[74] = 2;
    stations[78] = 2;

    stations[32] = 3;
    in_sensors[30] = 3;

    /*
    out_sensors[35] = 4;
    in_sensors[37] = 4;
    stations[39] = 4;

    out_sensors[19] = 5;
    in_sensors[22] = 5;
    stations[25] = 5;

    out_sensors[48] = 6;
    in_sensors[52] = 6;
    stations[54] = 6;
    */
    

    for ( i = 58; i &lt; NUM_PIECES + 58; i++ ){
        belt[i] = 1;
    }    

}



</declaration>
	<template>
		<name>Processing_Station</name>
		<parameter>const id_s id</parameter>
		<declaration>clock y;
int processing_counter = 0;
int in_sens_pos;
int out_sens_pos;
int tmp_next_id;
int next_id;
int next_st;
int next_id2;
int len_queue;
int processing_time;
int pos_curr_station;


int get_len_pre_processing() {
    int i, station, sensor;
    
    for (i = 0; i &lt; NUM_SLOTS; i++) {
        if (stations[i] == (id + 1)) station = i;
        if (in_sensors[i] == (id + 1)) sensor = i;
    }
    if (sensor &gt; station) return NUM_SLOTS - sensor + station;
    else return station-sensor;
}

void update_preprocessing(){
    int i;
    for (i = 0; i &lt; NUM_SLOTS; i++) {
        if ((preprocessing[i] == (id + 1)||stations[i] == (id + 1)) &amp;&amp; belt[i] == 1)   status_preprocessing[id] = 1; // proabilmente controlli inutili
    }

    if (!belt[in_sens_pos]) status_in_sensors[id] = 0;
}

void free_preprocessing(){
    //status_stations[id] = 1;
    
    status_preprocessing[id] = 0;
    processing_time = in_sens_pos;
}

void free_all(){
    status_stations[id] = 0;
    status_preprocessing[id] = 0;
    //if (!belt[in_sens_pos]) status_in_sensors[id] = 0;
}

void free_station(){
    status_stations[id] = 0;
}

bool check_outsensor(){
    for(i = 0; i &lt; NUM_SLOTS; i++){
        if (out_sensors[i] == id + 1) return 1;
    }
    return 0;
}

void set_parameters(){ //da sistemare per seconda branch
    int i, j, k;
    next_id = -1;
    next_id2 = -1;


    for(j = 0; j &lt; NUM_SLOTS; j++){
        if(in_sensors[j] == id + 1){
            in_sens_pos = j;
            k = j+1;
            while(stations[k] != id + 1){
                preprocessing[k] = id + 1;
                k++;
            }
            pos_curr_station = k;
        }
    }


    for(i = 0; i &lt; NUM_SLOTS; i++){
        if (check_outsensor()){
            if(out_sensors[i] == id + 1){
                k = i; 
                while(in_sensors[k] != id + 1){
                    max_len_queue[id]++;
                    k++;
                }
                max_len_queue[id]++;
            }
        } else {
            max_len_queue[id] = -1;
            /* Verificare la lunghezza della coda */
            // se una stazione ha out sensor si conta, altrimenti: 
            // verificando che una stazione non butta fuori il pezzetto quando il tile seguente Ã¨ occupato (sempre verificato per costruzione della belt)
            // dimostriamo che la coda non eccede mai la sua massima lunghezza (supponiamo che sia infinia se non presente out sensor)
        }
    }
    
    for(i = pos_curr_station; i &lt; NUM_SLOTS; i++){

        if(i == NUM_SLOTS - 1) i = 0;
     
        if(out_sensors[i] &gt; 0){
            next_id = out_sensors[i] - 1;
            i = NUM_SLOTS;
        }else if(in_sensors[i] &gt; 0){
            i = NUM_SLOTS;
        }else if(i == GATE_POS &amp;&amp; i &lt; FIRST_POS_BELT2 &amp;&amp; i &gt; LAST_POS_BELT2){
            for(k = FIRST_POS_BELT2; k &lt; LAST_POS_BELT2; k++){
                if(out_sensors[i] &gt; 0){
                    next_id2 = out_sensors[i] - 1;
                    k = LAST_POS_BELT2;
                }else if(in_sensors[i] &gt; 0){
                    k = LAST_POS_BELT2;
                }
            }
            for(k = GATE_POS + 1; k &lt; NUM_SLOTS; k++){
                if(k == FIRST_POS_BELT2 - 1) k = LAST_POS_BELT2 + 1;
                if(out_sensors[i] &gt; 0){
                    next_id = out_sensors[i] - 1;
                    k = NUM_SLOTS;
                }else if(in_sensors[i] &gt; 0){
                    k = NUM_SLOTS;
                }
            }
            i = NUM_SLOTS;
        }
    } 
}

/*
for ( i = 0; i &lt; NUM_SLOTS; i++ ){
        if (in_sensors[i] == id+1) in_sens_pos = i;
        if (out_sensors[i] == id+1) out_sens_pos = i;
        if (stations[i] == prev_id+1) prev_stat_pos = i;
    }
*/




</declaration>
		<location id="id0" x="-552" y="-1275">
			<name x="-603" y="-1309">FREE</name>
		</location>
		<location id="id1" x="-552" y="-901">
			<name x="-570" y="-875">PREPROCESSING</name>
		</location>
		<location id="id2" x="442" y="-1275">
			<name x="459" y="-1275">WAIT</name>
		</location>
		<location id="id3" x="264" y="-901">
			<name x="230" y="-884">PROCESSING</name>
			<label kind="invariant" x="213" y="-867">y &lt;= processing_time</label>
		</location>
		<location id="id4" x="-228" y="-1275">
			<name x="-348" y="-1258">AFTER_PROCESSING</name>
		</location>
		<location id="id5" x="-722" y="-1275">
			<name x="-732" y="-1309">INIT</name>
		</location>
		<location id="id6" x="263" y="-1275">
			<committed/>
		</location>
		<location id="id7" x="-17" y="-1368">
			<urgent/>
		</location>
		<location id="id8" x="-170" y="-901">
			<urgent/>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id8"/>
			<target ref="id1"/>
			<label kind="guard" x="-433" y="-1011">belt[pos_curr_station] == 0</label>
			<nail x="-357" y="-986"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-382" y="-926">step?</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-739" y="-1062">enter_preprocessing[id]?</label>
			<label kind="assignment" x="-739" y="-1045">update_preprocessing()</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="guard" x="-204" y="-1411">next_id2 == -1 ||
tmp_next_id == next_id2</label>
			<label kind="synchronisation" x="-204" y="-1360">free_in_sensor[id]!</label>
			<label kind="assignment" x="-204" y="-1377">status_stations[id] = 0</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="34" y="-1249">next_id2 &gt;= 0</label>
			<label kind="assignment" x="17" y="-1232">tmp_next_id = next_id2</label>
			<nail x="68" y="-1258"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-238" y="-1139">y &gt;= processing_time &amp;&amp;
next_id == -1</label>
			<label kind="synchronisation" x="-238" y="-1156">free_in_sensor[id]!</label>
			<label kind="assignment" x="-238" y="-1105">status_stations[id] = 0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="263" y="-1428">check_outsensor[tmp_next_id]!</label>
			<nail x="442" y="-1402"/>
			<nail x="263" y="-1402"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="280" y="-1266">busy[tmp_next_id]?</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="85" y="-1360">free[tmp_next_id]?</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id6"/>
			<label kind="guard" x="280" y="-1062">y &gt;= processing_time &amp;&amp;
next_id &gt;=0</label>
			<label kind="synchronisation" x="280" y="-1079">check_outsensor[tmp_next_id]!</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-671" y="-1292">initialize?</label>
			<label kind="assignment" x="-697" y="-1275">set_parameters()</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-442" y="-1334">step?</label>
			<label kind="assignment" x="-442" y="-1317">processing_counter--, 
free_all()</label>
			<nail x="-374" y="-1275"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id3"/>
			<label kind="guard" x="-119" y="-977">belt[pos_curr_station] == 1</label>
			<label kind="assignment" x="-119" y="-960">free_preprocessing(), 
processing_counter++, tmp_next_id = next_id,
status_stations[id] = 1, y = 0</label>
			<nail x="246" y="-901"/>
		</transition>
	</template>
	<template>
		<name>Out_sensor</name>
		<parameter> const id_outsens id</parameter>
		<declaration>int out_sensor_pos;

void set_pos(){    
    int i;

    for ( i = 0; i &lt; NUM_SLOTS; i++ ){
        if (out_sensors[i] == id+1) out_sensor_pos = i;
    }

}</declaration>
		<location id="id9" x="-365" y="-144">
			<committed/>
		</location>
		<location id="id10" x="-646" y="-144">
		</location>
		<location id="id11" x="-782" y="-144">
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-764" y="-161">initialize?</label>
			<label kind="assignment" x="-764" y="-144">set_pos()</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="guard" x="-569" y="-305">belt[out_sensor_pos] == 1</label>
			<label kind="synchronisation" x="-569" y="-288">busy[id]!</label>
			<nail x="-510" y="-263"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="guard" x="-561" y="-17">belt[out_sensor_pos] == 0</label>
			<label kind="synchronisation" x="-561" y="0">free[id]!</label>
			<nail x="-510" y="-25"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-578" y="-178">check_outsensor[id]?</label>
		</transition>
	</template>
	<template>
		<name x="9" y="9">Conveyor_Belt</name>
		<declaration>clock x;
bool gate;
int counter_gate;

int get_index(){
    int i;

    for (i = 0; i &lt; NUM_SLOTS-1; i++){
        if (!belt[i] &amp;&amp; !belt[i+1]){
            return i;
        }
    }

    return NUM_SLOTS;
}

void shift() {
    int next, prec, i, tmp, tmpfirst, first_index;

    bool first = belt[0];
    bool second = belt[1];
    bool last = belt[NUM_SLOTS-1];
    bool semilast = belt[NUM_SLOTS-2];

    first_index = get_index();
    i = first_index;

    while (i != first_index+1) {

        prec = i;        

        if (i == NUM_SLOTS-1) next = 0;
        else next = i+1;

        if(i == GATE_POS){
            if(counter_gate%10){
                gate = true;
            }else{
                gate = false;
                counter_gate = 0;
            }
             if(!gate){
                 next = FIRST_POS_BELT2;
                 prec = GATE_POS;
             }else{
                 next = i+1;
                 prec = i;  
             }
        } else if(i == LAST_POS_BELT2){ // exit from secondary belt
            next = FIRST_POS_BELT2 - 1;
            prec = LAST_POS_BELT2;
        }else if(i == FIRST_POS_BELT2 - 1){ // interleaving of the two belts
            next = LAST_POS_BELT2 + 1;
            prec = FIRST_POS_BELT2 - 1;
        }

        if (belt[prec] &amp;&amp; !belt[next]){

            if (stations[next] &gt; 0){
                tmp = belt[next];
                belt[next] = belt[prec];
                belt[prec] = tmp;
                // status_stations[stations[next]-1] = 1;
            } else if (in_sensors[next] &gt; 0){
                tmp = belt[next];
                belt[next] = belt[prec];
                belt[prec] = tmp;
                //status_in_sensors[in_sensors[next]-1] = 1;   
            } else if(in_sensors[prec] &gt; 0 &amp;&amp; !status_preprocessing[in_sensors[prec]-1] &amp;&amp; !status_stations[in_sensors[prec]-1]){
                tmp = belt[next];
                belt[next] = belt[prec];
                belt[prec] = tmp;     
                // status_preprocessing[in_sensors[prec]-1] = 1;      
            } else if (stations[prec] &amp;&amp; !status_stations[stations[prec]-1]) { 
               tmp = belt[next];
               belt[next] = belt[prec];
               belt[prec] = tmp;
            } else if (preprocessing[next] &gt; 0 &amp;&amp; preprocessing[prec] &gt; 0) {
                    tmp = belt[next];
                    belt[next] = belt[prec];
                    belt[prec] = tmp;
            } else if (!belt[next] &amp;&amp; (stations[next] == 0) &amp;&amp; (in_sensors[next] == 0) &amp;&amp; (preprocessing[next] == 0) &amp;&amp; (stations[prec] == 0) &amp;&amp; (in_sensors[prec] == 0) &amp;&amp; (preprocessing[prec] == 0)){
                    tmp = belt[next];
                    belt[next] = belt[prec];
                    belt[prec] = tmp;
            }
        }

        if (i != 0) i--;
        else i = NUM_SLOTS-1;
    }
}


</declaration>
		<location id="id12" x="-1232" y="-1020">
		</location>
		<location id="id13" x="-1623" y="-1020">
			<name x="-1633" y="-1054">INIT</name>
			<committed/>
		</location>
		<init ref="id13"/>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-1538" y="-1020">initialize!</label>
			<label kind="assignment" x="-1538" y="-1037">initializer(), update_belt_count()</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id12"/>
			<label kind="guard" x="-1181" y="-1045">x &gt;= 5</label>
			<label kind="synchronisation" x="-1181" y="-1079">step!</label>
			<label kind="assignment" x="-1181" y="-1062">shift(), update_belt_count(), counter_gate++, x = 0</label>
			<nail x="-1028" y="-1020"/>
			<nail x="-1232" y="-943"/>
		</transition>
	</template>
	<template>
		<name>Sensor</name>
		<parameter>const id_sens id</parameter>
		<declaration>int in_sensor_pos;
clock x;

void set_pos(){    
    int i;

    for ( i = 0; i &lt; NUM_SLOTS; i++ ){
        if (in_sensors[i] == id+1) in_sensor_pos = i;
    }

}

void update_sensor_status(){
    status_in_sensors[id] = 1;
}</declaration>
		<location id="id14" x="-263" y="-93">
			<name x="-306" y="-85">FREE</name>
		</location>
		<location id="id15" x="-263" y="195">
			<name x="-314" y="186">BUSY</name>
		</location>
		<location id="id16" x="17" y="-93">
		</location>
		<location id="id17" x="-476" y="-93">
			<name x="-486" y="-127">INIT</name>
		</location>
		<location id="id18" x="-263" y="-212">
			<urgent/>
		</location>
		<location id="id19" x="17" y="195">
			<urgent/>
		</location>
		<init ref="id17"/>
		<transition>
			<source ref="id18"/>
			<target ref="id14"/>
			<label kind="guard" x="-493" y="-238">belt[in_sensor_pos] == 0</label>
			<nail x="-348" y="-212"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="25" y="25">step?</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-255" y="-153">step?</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-212" y="161">enter_preprocessing[id]!</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-416" y="-119">initialize?</label>
			<label kind="assignment" x="-416" y="-93">set_pos()</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="guard" x="-161" y="-212">belt[in_sensor_pos] == 1</label>
			<label kind="assignment" x="-161" y="-195">update_sensor_status()</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-399" y="51">free_in_sensor[id]?</label>
		</transition>
	</template>
	<system>system Processing_Station, Conveyor_Belt, Sensor, Out_sensor;</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>The plant never incurs in deadlock</comment>
		</query>
		<query>
			<formula>A[] !Conveyor_Belt.INIT imply belt_count == NUM_PIECES
</formula>
			<comment>It never happens that two pieces occupy the same belt slot</comment>
		</query>
		<query>
			<formula>A[] forall (i: id_s) Processing_Station(i).processing_counter &lt;= 1</formula>
			<comment>It never happens that a station holds more than 1 piece</comment>
		</query>
		<query>
			<formula>A[] forall (i:id_s) len_queue[i] &lt;= max_len_queue[i]</formula>
			<comment>no queue ever exceeds the maximum allowed length</comment>
		</query>
	</queries>
</nta>
