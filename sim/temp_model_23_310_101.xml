<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int NUM_PIECES = 23;
const int PROCESSING_MEAN_S1 = 10;
const int PROCESSING_VAR_S1 = 2;
const int PROCESSING_MEAN_S2 = 310;
const int PROCESSING_VAR_S2 = 5;
const int PROCESSING_MEAN_S3 = 10;
const int PROCESSING_VAR_S3 = 2;
const int ERROR_PROB_S1 = 1;
const int ERROR_PROB_S2 = 1;
const int ERROR_PROB_S3 = 1;
const int ERROR_PROB_OUTS1 = 1;
const int ERROR_PROB_OUTS2 = 101;
const int ERROR_PROB_OUTS3 = 1;
const int SPEED = 5;
 
 const int NUM_SLOTS = 61;
 const int GATE_POS = -1;
const int FIRST_POS_BELT2 = -1;
const int LAST_POS_BELT2 = -1;
const int RULE_CONTROLLER = 10;

/** Change this to modify number of stations and sensors **/
            const int NUM_STATIONS = 3;
            const int NUM_IN_SENSORS = 3;
            const int NUM_OUT_SENSORS = 3;
/****************************************************************/

const int TAU = 5000;
typedef int[0, NUM_STATIONS-1] id_s;
typedef int[0, NUM_IN_SENSORS-1] id_sens;
typedef int[0, NUM_OUT_SENSORS-1] id_outsens;

bool belt[NUM_SLOTS];
int stations[NUM_SLOTS];
int in_sensors[NUM_SLOTS];
int out_sensors[NUM_SLOTS];
int preprocessing[NUM_SLOTS];

bool status_in_sensors[NUM_IN_SENSORS];
bool status_stations[NUM_STATIONS];
bool status_preprocessing[NUM_STATIONS];

broadcast chan enter_preprocessing[NUM_STATIONS], free_in_sensor[NUM_IN_SENSORS], check_outsensor[NUM_OUT_SENSORS], busy[NUM_OUT_SENSORS], free[NUM_OUT_SENSORS];
broadcast chan initialize, step;

int previous_station[NUM_STATIONS];
int max_len_queue[NUM_STATIONS];
int len_queue[NUM_STATIONS];

int belt_count;

void update_belt_count() {
    int i;
    belt_count = 0;
    for (i = 0; i &lt; NUM_SLOTS; i++) {
        if (belt[i]) {
        belt_count++;
        }
    }
}

void initializer() {

    int i;

    out_sensors[42] = 1;
    in_sensors[12] = 1;
    stations[14] = 1;
    previous_station[0] = 30;
    //max_len_queue[0] = abs(12 - 30) + 1;

    out_sensors[18] = 2;
    in_sensors[22] = 2;
    stations[24] = 2;
    previous_station[1] = 14;
    //max_len_queue[1] = abs(20 - 14) + 1;
    
    out_sensors[26] = 3;
    in_sensors[28] = 3;
    stations[30] = 3;
    previous_station[2] = 22;
    //max_len_queue[2] = abs(28 - 30) + 1;


    for ( i = 31; i &lt; NUM_PIECES+31; i++ ){
        belt[i] = 1;
    }

}



</declaration>
	<template>
		<name>Processing_Station</name>
		<parameter>const id_s id, const double mean, const double variance</parameter>
		<declaration>clock x;
int processing_counter = 0;
int in_sens_pos;
int tmp_next_id;
int next_id;
int next_st;
int next_id2;
int processing_time;
int pos_curr_station;

int get_len_pre_processing() {
    int i, station, sensor;
    
    for (i = 0; i &lt; NUM_SLOTS; i++) {
        if (stations[i] == (id + 1)) station = i;
        if (in_sensors[i] == (id + 1)) sensor = i;
    }
    if (sensor &gt; station) return NUM_SLOTS - sensor + station;
    else return station-sensor;
}

void update_preprocessing(){
    int i;
    for (i = 0; i &lt; NUM_SLOTS; i++) {
        if ((preprocessing[i] == (id + 1)||stations[i] == (id + 1)) &amp;&amp; belt[i] == 1)   status_preprocessing[id] = 1; 
    }

    if (!belt[in_sens_pos]) status_in_sensors[id] = 0;
}

void free_preprocessing(){ 
    status_preprocessing[id] = 0;
    processing_time = fint(random_normal(mean, sqrt(variance)));
}

void free_all(){
    status_stations[id] = 0;
    status_preprocessing[id] = 0;
}

void free_station(){
    status_stations[id] = 0;
}

void set_max_len_queue(){
    int i;
    i = in_sens_pos;
    while(out_sensors[i]==0 &amp;&amp; stations[i]==0){
        max_len_queue[id]++;

        if(i == FIRST_POS_BELT2) i = GATE_POS + 1;
        if(i == FIRST_POS_BELT2 - 1) i = LAST_POS_BELT2 + 1;
        if(i != 0) i--;
        else i = NUM_SLOTS-1;
    }  

    if(out_sensors[i]) max_len_queue[id]++; 
}

void set_parameters(){ 
    int i, j, k;
    next_id = -1;
    next_id2 = -1;


    for(j = 0; j &lt; NUM_SLOTS; j++){
        if(in_sensors[j] == id + 1){
            in_sens_pos = j;
            k = j+1;
            while(stations[k] != id + 1){
                preprocessing[k] = id + 1;
                k++;
            }
            pos_curr_station = k;
        }
    }
     
    for(i = pos_curr_station; i &lt; NUM_SLOTS; i++){

        
     
        if(out_sensors[i] &gt; 0){
            next_id = out_sensors[i] - 1;
            i = NUM_SLOTS;
        }else if(in_sensors[i] &gt; 0){
            i = NUM_SLOTS;
        }else if(i == GATE_POS){
            for(k = FIRST_POS_BELT2; k &lt; LAST_POS_BELT2; k++){
                if(out_sensors[k] &gt; 0){
                    next_id2 = out_sensors[k] - 1;
                    k = LAST_POS_BELT2;
                }else if(in_sensors[k] &gt; 0){
                    k = LAST_POS_BELT2;
                }
            }
            for(k = GATE_POS + 1; k &lt; NUM_SLOTS; k++){
                if(out_sensors[k] &gt; 0){
                    next_id = out_sensors[k] - 1;
                    k = NUM_SLOTS;
                }else if(in_sensors[k] &gt; 0){
                    k = NUM_SLOTS;
                }
                if(k == FIRST_POS_BELT2 - 1) k = LAST_POS_BELT2 + 1;
            }
            i = NUM_SLOTS;
        }

        if(i == NUM_SLOTS - 1) i = 0;
        
    } 
    set_max_len_queue();
}




</declaration>
		<location id="id0" x="-1054" y="-1020">
			<name x="-1105" y="-1054">FREE</name>
		</location>
		<location id="id1" x="-738" y="-646">
			<name x="-774" y="-629">WAIT_STEP</name>
			<urgent/>
		</location>
		<location id="id2" x="-60" y="-1020">
			<name x="-43" y="-1020">WAIT</name>
			<urgent/>
		</location>
		<location id="id3" x="-238" y="-646">
			<name x="-272" y="-629">PROCESSING</name>
			<label kind="invariant" x="-289" y="-612">x &lt;= processing_time</label>
		</location>
		<location id="id4" x="-730" y="-1020">
			<name x="-876" y="-1054">AFTER_PROCESSING</name>
		</location>
		<location id="id5" x="-1224" y="-1020">
			<name x="-1234" y="-1054">INIT</name>
		</location>
		<location id="id6" x="-239" y="-1020">
			<name x="-222" y="-1011">WAIT_CHECK</name>
		</location>
		<location id="id7" x="-519" y="-1113">
			<name x="-552" y="-1147">WAIT_FREE</name>
			<urgent/>
		</location>
		<location id="id8" x="-1054" y="-646">
			<name x="-1131" y="-629">PREPROCESSING</name>
		</location>
		<location id="id9" x="-518" y="-1020">
			<urgent/>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id9"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-493" y="-1011">check_outsensor[tmp_next_id]!</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id8"/>
			<label kind="guard" x="-986" y="-765">belt[pos_curr_station] == 0</label>
			<nail x="-910" y="-739"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-910" y="-663">step?</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-1233" y="-884">enter_preprocessing[id]?</label>
			<label kind="assignment" x="-1224" y="-867">update_preprocessing()</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="guard" x="-748" y="-1147">next_id2 == -1 ||
tmp_next_id == next_id2</label>
			<label kind="synchronisation" x="-748" y="-1164">free_in_sensor[id]!</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id9"/>
			<label kind="guard" x="-493" y="-1088">next_id2 &gt;= 0</label>
			<label kind="assignment" x="-510" y="-1071">tmp_next_id = next_id2</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-714" y="-867">x &gt;= processing_time &amp;&amp;
next_id == -1</label>
			<label kind="synchronisation" x="-714" y="-884">free_in_sensor[id]!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-239" y="-1173">check_outsensor[tmp_next_id]!</label>
			<nail x="-60" y="-1147"/>
			<nail x="-239" y="-1147"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-222" y="-1037">busy[tmp_next_id]?</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-416" y="-1156">free[tmp_next_id]?</label>
			<nail x="-357" y="-1122"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id6"/>
			<label kind="guard" x="-222" y="-807">x &gt;= processing_time &amp;&amp;
next_id &gt;=0</label>
			<label kind="synchronisation" x="-222" y="-824">check_outsensor[tmp_next_id]!</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-1173" y="-1037">initialize?</label>
			<label kind="assignment" x="-1199" y="-1020">set_parameters()</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-995" y="-1003">step?</label>
			<label kind="assignment" x="-995" y="-986">processing_counter--,
free_all(),
status_stations[id] = 0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-629" y="-722">belt[pos_curr_station] == 1</label>
			<label kind="assignment" x="-629" y="-705">x = 0, free_preprocessing(), 
processing_counter++, tmp_next_id = next_id,
status_stations[id] = 1</label>
		</transition>
	</template>
	<template>
		<name x="9" y="9">Conveyor_Belt</name>
		<parameter>const int speed</parameter>
		<declaration>clock x;
bool gate;
int counter_gate;

int get_index(){
    int i;

    for (i = 0; i &lt; NUM_SLOTS-1; i++){
        if (!belt[i] &amp;&amp; !belt[i+1]){
            return i;
        }
    }

    return NUM_SLOTS;
}

int get_in_sens_position(int id){
    int i;

    for (i = 0; i &lt; NUM_SLOTS; i++) {
        if (in_sensors[i] == id+1) return i;
    }
    return -2;
}

void set_len_queue(){
    int i, j;
    int count = 0;
    int in_sens_pos;
    
    for (j = 0; j &lt; NUM_STATIONS; j++){
        in_sens_pos = get_in_sens_position(j);
        count = 0;
        i = in_sens_pos;
        while(stations[i]==0){
            if(belt[i]) count++;

            if(i == FIRST_POS_BELT2) i = GATE_POS + 1;
            if(i == FIRST_POS_BELT2 - 1) i = LAST_POS_BELT2 + 1;
            if(i != 0) i--;
            else i = NUM_SLOTS-1;
        }  
        len_queue[j] = count;
    }  
}


void shift() {
    int next, prec, i, tmp, tmpfirst, first_index;

    bool first = belt[0];
    bool second = belt[1];
    bool last = belt[NUM_SLOTS-1];
    bool semilast = belt[NUM_SLOTS-2];

    first_index = get_index();
    i = first_index;

    while (i != first_index+1) {

        prec = i;        

        if (i == NUM_SLOTS-1) next = 0;
        else next = i+1;

        if(i == GATE_POS){
            if(counter_gate%RULE_CONTROLLER){
                gate = true;
            }else{
                gate = false;
                counter_gate = 0;
            }
             if(!gate){
                 next = FIRST_POS_BELT2;
                 prec = GATE_POS;
             }else{
                 next = i+1;
                 prec = i;  
             }
        } else if(i == LAST_POS_BELT2){ // exit from secondary belt
            next = FIRST_POS_BELT2 - 1;
            prec = LAST_POS_BELT2;
        }else if(i == FIRST_POS_BELT2 - 1){ // interleaving of the two belts
            next = LAST_POS_BELT2 + 1;
            prec = FIRST_POS_BELT2 - 1;
        }

        if (belt[prec] &amp;&amp; !belt[next]){

            if (stations[next] &gt; 0 &amp;&amp; !status_stations[stations[next]-1] ){
                tmp = belt[next];
                belt[next] = belt[prec];
                belt[prec] = tmp;
            } else if (in_sensors[next] &gt; 0 &amp;&amp; !status_in_sensors[in_sensors[next]-1]){
                tmp = belt[next];
                belt[next] = belt[prec];
                belt[prec] = tmp;
            } else if(in_sensors[prec] &gt; 0 &amp;&amp; !status_preprocessing[in_sensors[prec]-1] &amp;&amp; !status_stations[in_sensors[prec]-1]){
                tmp = belt[next];
                belt[next] = belt[prec];
                belt[prec] = tmp;     
            } else if (stations[prec] &amp;&amp; !status_stations[stations[prec]-1]) { 
               tmp = belt[next];
               belt[next] = belt[prec];
               belt[prec] = tmp;
            } else if (preprocessing[next] &gt; 0 &amp;&amp; preprocessing[prec] &gt; 0) {
                    tmp = belt[next];
                    belt[next] = belt[prec];
                    belt[prec] = tmp;
            } else if (!belt[next] &amp;&amp; (stations[next] == 0) &amp;&amp; (in_sensors[next] == 0) &amp;&amp; (preprocessing[next] == 0) &amp;&amp; (stations[prec] == 0) &amp;&amp; (in_sensors[prec] == 0) &amp;&amp; (preprocessing[prec] == 0)){
                    tmp = belt[next];
                    belt[next] = belt[prec];
                    belt[prec] = tmp;
            }
        }

        if (i != 0) i--;
        else i = NUM_SLOTS-1;
    }
}


</declaration>
		<location id="id10" x="-935" y="-578">
			<name x="-945" y="-612">INIT</name>
			<committed/>
		</location>
		<location id="id11" x="-765" y="-485">
			<name x="-790" y="-468">READY</name>
			<committed/>
		</location>
		<location id="id12" x="-561" y="-612">
			<name x="-571" y="-646">MOVE</name>
			<label kind="invariant" x="-595" y="-586">x  &lt;= speed + 2</label>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id12"/>
			<target ref="id12"/>
			<label kind="guard" x="-382" y="-663">x &gt;= speed</label>
			<label kind="synchronisation" x="-382" y="-646">step!</label>
			<label kind="assignment" x="-382" y="-629">shift(), 
counter_gate++, x = 0,
update_belt_count(),
set_len_queue()</label>
			<nail x="-399" y="-672"/>
			<nail x="-399" y="-561"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-722" y="-570">initialize!</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="assignment" x="-1054" y="-519">initializer(), update_belt_count()</label>
		</transition>
	</template>
	<template>
		<name>Sensor</name>
		<parameter>const id_sens id, const int error_probability</parameter>
		<declaration>clock x;
int in_sensor_pos;

void set_pos(){    
    int i;

    for ( i = 0; i &lt; NUM_SLOTS; i++ ){
        if (in_sensors[i] == id+1) in_sensor_pos = i;
    }

}

void update_sensor_status(bool status){
    status_in_sensors[id] = status;
}</declaration>
		<location id="id13" x="-535" y="-93">
			<name x="-552" y="-127">FREE</name>
		</location>
		<location id="id14" x="-748" y="-93">
			<name x="-758" y="-127">INIT</name>
		</location>
		<location id="id15" x="17" y="-238">
			<name x="0" y="-272">BUSY</name>
		</location>
		<location id="id16" x="-263" y="280">
			<name x="-306" y="297">FAKE_BUSY</name>
		</location>
		<location id="id17" x="-263" y="-93">
			<urgent/>
		</location>
		<location id="id18" x="425" y="-93">
			<name x="450" y="-93">WAIT</name>
		</location>
		<location id="id19" x="425" y="-238">
			<urgent/>
		</location>
		<location id="id20" x="-535" y="280">
			<urgent/>
		</location>
		<branchpoint id="id21" x="-263" y="178">
		</branchpoint>
		<branchpoint id="id22" x="76" y="-93">
		</branchpoint>
		<init ref="id14"/>
		<transition>
			<source ref="id17"/>
			<target ref="id21"/>
			<label kind="guard" x="-246" y="42">belt[in_sensor_pos] == 0</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id22"/>
			<label kind="guard" x="-170" y="-119">belt[in_sensor_pos] == 1</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id13"/>
			<label kind="assignment" x="-756" y="102">update_sensor_status(false)</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-416" y="263">step?</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="136" y="-263">enter_preprocessing[id]!</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="433" y="-170">step?</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-391" y="-93">step?</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id13"/>
			<label kind="probability" x="-450" y="59">100 - error_probability</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id16"/>
			<label kind="assignment" x="-246" y="221">update_sensor_status(true)</label>
			<label kind="probability" x="-246" y="204">error_probability</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id18"/>
			<label kind="assignment" x="170" y="-85">update_sensor_status(true)</label>
			<label kind="probability" x="161" y="-119">100 - error_probability</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id13"/>
			<label kind="probability" x="0" y="-195">error_probability</label>
			<nail x="76" y="-178"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-688" y="-127">initialize?</label>
			<label kind="assignment" x="-688" y="-110">set_pos()</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-297" y="-212">free_in_sensor[id]?</label>
		</transition>
	</template>
	<template>
		<name>Out_sensor</name>
		<parameter>const id_outsens id, const int error_probability</parameter>
		<declaration>clock x;

int out_sensor_pos;
bool malfunction = false;

void set_pos(){    
    int i;

    for ( i = 0; i &lt; NUM_SLOTS; i++ ){
        if (out_sensors[i] == id+1) out_sensor_pos = i;
    }

}</declaration>
		<location id="id23" x="-569" y="-161">
			<name x="-579" y="-195">CHECK</name>
			<urgent/>
		</location>
		<location id="id24" x="-850" y="-161">
			<name x="-952" y="-187">WAIT_CHECK</name>
		</location>
		<location id="id25" x="-1241" y="-161">
		</location>
		<location id="id26" x="-374" y="-272">
			<name x="-357" y="-280">SENSOR_MALFUNCTION</name>
			<urgent/>
		</location>
		<location id="id27" x="-374" y="-51">
			<name x="-349" y="-59">SENSOR_WORKING</name>
			<urgent/>
		</location>
		<branchpoint id="id28" x="-476" y="-161">
		</branchpoint>
		<init ref="id25"/>
		<transition>
			<source ref="id26"/>
			<target ref="id24"/>
			<label kind="guard" x="-722" y="-399">belt[out_sensor_pos] == 0</label>
			<label kind="synchronisation" x="-722" y="-382">busy[id]!</label>
			<nail x="-416" y="-357"/>
			<nail x="-790" y="-357"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id24"/>
			<label kind="guard" x="-739" y="-306">belt[out_sensor_pos] == 1</label>
			<label kind="synchronisation" x="-738" y="-289">free[id]!</label>
			<nail x="-756" y="-272"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="assignment" x="-399" y="-119">malfunction = false</label>
			<label kind="probability" x="-425" y="-136">200-error_probability</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id26"/>
			<label kind="assignment" x="-425" y="-204">malfunction = true</label>
			<label kind="probability" x="-408" y="-229">error_probability</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id28"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="-1207" y="-204">initialize?</label>
			<label kind="assignment" x="-1207" y="-187">set_pos()</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id24"/>
			<label kind="guard" x="-756" y="68">belt[out_sensor_pos] == 1</label>
			<label kind="synchronisation" x="-756" y="85">busy[id]!</label>
			<nail x="-399" y="51"/>
			<nail x="-773" y="51"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id24"/>
			<label kind="guard" x="-714" y="-34">belt[out_sensor_pos] == 0</label>
			<label kind="synchronisation" x="-714" y="-17">free[id]!</label>
			<nail x="-714" y="-51"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="-782" y="-195">check_outsensor[id]?</label>
		</transition>
	</template>
	<system>station1 = Processing_Station(0, PROCESSING_MEAN_S1, PROCESSING_VAR_S1);
station2 = Processing_Station(1, PROCESSING_MEAN_S2, PROCESSING_VAR_S2);
station3 = Processing_Station(2, PROCESSING_MEAN_S3, PROCESSING_VAR_S3);

sensor1 = Sensor(0, ERROR_PROB_S1);
sensor2 = Sensor(1, ERROR_PROB_S2);
sensor3 = Sensor(2, ERROR_PROB_S3);

out_sensor1 = Out_sensor(0, ERROR_PROB_OUTS1);
out_sensor2 = Out_sensor(1,  ERROR_PROB_OUTS2);
out_sensor3 = Out_sensor(2,  ERROR_PROB_OUTS3);

conv_belt = Conveyor_Belt(SPEED);

system station1, station2, station3, 
conv_belt, 
sensor1, sensor2, sensor3, 
out_sensor1, out_sensor2, out_sensor3;
</system>
	<queries>
		<query>
			<formula>Pr[&lt;=TAU] ([] forall (i:id_s) len_queue[i] &lt;= max_len_queue[i])</formula>
			<comment>no queue ever exceeds the maximum allowed length</comment>
		</query>
	</queries>
</nta>
