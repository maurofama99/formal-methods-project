<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int NUM_PIECES = 2; 
const int NUM_STATIONS = 1;
const int NUM_IN_SENSORS = 1;
const int NUM_OUT_SENSORS = 1;
const int NUM_SLOTS = 10;

typedef int[0, NUM_STATIONS-1] id_s;

bool belt[NUM_SLOTS];
int stations[NUM_SLOTS];
int in_sensors[NUM_SLOTS];
int out_sensors[NUM_SLOTS];
int preprocessing[NUM_SLOTS];

bool status_in_sensors[NUM_IN_SENSORS];
bool status_stations[NUM_STATIONS];
bool status_preprocessing[NUM_STATIONS];

chan enter_preprocessing[NUM_STATIONS], free_in_sensor[NUM_IN_SENSORS];
broadcast chan initializer, in_sensor;

int max_len_queue[NUM_STATIONS];
int len_queue[NUM_STATIONS];

</declaration>
	<template>
		<name>Initialization</name>
		<declaration>void initialize() {

    int i;

    /*out_sensors[81] = 1;
    in_sensors[94] = 1;
    stations[2] = 1;
    max_len_queue[0] = 13;
    out_sensors[9] = 2;
    in_sensors[19] = 2;
    stations[23] = 2;
    max_len_queue[1] = 10;
    out_sensors[53] = 3;
    in_sensors[62] = 3;
    stations[66] = 3;
    max_len_queue[2] = 9;
    out_sensors[74] = 4;
    in_sensors[76] = 4;
    stations[78] = 4;
    max_len_queue[3] = 2;*/
    
    out_sensors[3] = 1;
    in_sensors[5] = 1;
    stations[7] = 1;
    preprocessing[6] = 1;
    max_len_queue[0] = 2;

    for(i = 0; i &lt; NUM_PIECES; i++){
        belt[i] = 1;
    }

    for (i=0; i&lt; NUM_STATIONS; i++){
        status_stations[i] = 0;
        status_in_sensors[i] = 0;
        status_preprocessing[i] = 0;
        len_queue[i] = 0;
    }


    
}</declaration>
		<location id="id0" x="-229" y="-8">
			<committed/>
		</location>
		<location id="id1" x="-68" y="-8">
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-170" y="-59">initializer!</label>
			<label kind="assignment" x="-170" y="-42">initialize()</label>
		</transition>
	</template>
	<template>
		<name>Processing_Station</name>
		<parameter>const id_s id, const id_s next_id, const int in_sens_pos</parameter>
		<declaration>clock y;
clock x;

int get_len_pre_processing() {
    int i, station, sensor;
    
    for (i = 0; i &lt; NUM_SLOTS; i++) {
        if (stations[i] == (id + 1)) station = i;
        if (in_sensors[i] == (id + 1)) sensor = i;
    }
    if (sensor &gt; station) return NUM_SLOTS - sensor + station;
    else return station-sensor;
}

int get_processing_time() { //fai un array di processing times
    return 500;
}

void enqueue() {
    len_queue[next_id]++;
}

void dequeue(int in_sens_pos) {
    status_preprocessing[id] = 1;
    if (!belt[in_sens_pos]) status_in_sensors[id] = 0;
    if (len_queue[id]&gt;0) len_queue[id]--;
}

void free_preprocessing(){
    //status_stations[id] = 1;
    status_preprocessing[id] = 0;
}

void free_all() {
    status_stations[id] = 0;
    status_preprocessing[id] = 0;
    status_in_sensors[id] = 0;
}

void free_station(){
    status_stations[id] = 0;
}

</declaration>
		<location id="id2" x="-637" y="-348">
		</location>
		<location id="id3" x="-484" y="-229">
			<name x="-510" y="-280">FREE</name>
		</location>
		<location id="id4" x="-136" y="-229">
			<name x="-196" y="-204">PREPROCESSING</name>
		</location>
		<location id="id5" x="-42" y="-76">
			<name x="-25" y="-76">WAIT</name>
		</location>
		<location id="id6" x="178" y="-229">
			<name x="168" y="-263">PROCESSING</name>
			<label kind="invariant" x="204" y="-238">y &lt;= get_processing_time()</label>
		</location>
		<location id="id7" x="-136" y="-510">
			<urgent/>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-663" y="-195">in_sensor?</label>
			<label kind="assignment" x="-663" y="-178">x = 0, y = 0</label>
			<nail x="-535" y="-119"/>
			<nail x="-586" y="-221"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-382" y="-289">x &gt; 10</label>
			<label kind="synchronisation" x="-382" y="-255">enter_preprocessing[id]?</label>
			<label kind="assignment" x="-382" y="-272">dequeue(in_sens_pos)</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="guard" x="-127" y="-357">belt[in_sens_pos]</label>
			<label kind="assignment" x="-127" y="-340">free_station(), dequeue(in_sens_pos)</label>
			<nail x="-136" y="-289"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id3"/>
			<label kind="guard" x="-501" y="-416">!belt[in_sens_pos]</label>
			<label kind="synchronisation" x="-501" y="-433">free_in_sensor[id]!</label>
			<label kind="assignment" x="-501" y="-399">free_all(), x = 0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-34" y="-467">len_queue[next_id] &lt; max_len_queue[next_id] &amp;&amp; y == get_processing_time()</label>
			<label kind="assignment" x="-25" y="-450">enqueue()</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="guard" x="-459" y="-68">len_queue[next_id] &lt; max_len_queue[next_id]</label>
			<label kind="synchronisation" x="-459" y="-51">free_in_sensor[id]!</label>
			<label kind="assignment" x="-459" y="-34">free_all(), x = 0</label>
			<nail x="-442" y="-76"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="85" y="-110">len_queue[next_id] == max_len_queue[next_id] &amp;&amp; y == get_processing_time()</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="guard" x="-102" y="-272">status_stations[id] == 1</label>
			<label kind="assignment" x="-111" y="-255">y = 0, free_preprocessing()</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-569" y="-323">initializer?</label>
		</transition>
	</template>
	<template>
		<name x="9" y="9">Conveyor_Belt</name>
		<declaration>clock x;

void shift() {
    int next, prec, i, tmp;

    bool last = belt[NUM_SLOTS-1];
    for (i = NUM_SLOTS-1; i &gt;= 0; i--){
        if (i == 0) {
            belt[0] = last;
            next = 0;
            prec = NUM_SLOTS-1; 
        } else {
            next = i;
            prec = i-1;
        }
        if (belt[prec] &amp;&amp; !belt[next]){
     
            if (stations[next] &gt; 0){
                tmp = belt[next];
                belt[next] = belt[prec];
                belt[prec] = tmp;
                status_stations[stations[next]-1] = 1;
            } else if (in_sensors[next] &gt; 0){
                tmp = belt[next];
                belt[next] = belt[prec];
                belt[prec] = tmp;
                status_in_sensors[in_sensors[next]-1] = 1;   
            } else if(in_sensors[prec] &gt; 0 &amp;&amp; !status_preprocessing[in_sensors[prec]-1] &amp;&amp; !status_stations[in_sensors[prec]-1]){
                tmp = belt[next];
                belt[next] = belt[prec];
                belt[prec] = tmp;             
            } else if (stations[prec] &amp;&amp; !status_stations[stations[prec]-1]) { 
               tmp = belt[next];
               belt[next] = belt[prec];
               belt[prec] = tmp;
            } else if (preprocessing[next] &gt; 0 &amp;&amp; preprocessing[prec] &gt; 0) {
                    tmp = belt[next];
                    belt[next] = belt[prec];
                    belt[prec] = tmp;
            } else if (!belt[next] &amp;&amp; (stations[next] == 0) &amp;&amp; (in_sensors[next] == 0) &amp;&amp; (preprocessing[next] == 0)){
                    tmp = belt[next];
                    belt[next] = belt[prec];
                    belt[prec] = tmp;
            }
        }
    }    
}

int check_insensor(){
    int i;
    for(i=0; i&lt; NUM_IN_SENSORS; i++){
        if(status_in_sensors[i] == 1) return 1;
    }
    return 0;
}</declaration>
		<location id="id8" x="-1428" y="-1020">
		</location>
		<location id="id9" x="-1232" y="-1020">
			<label kind="invariant" x="-1266" y="-1003">x &lt;= 10</label>
		</location>
		<location id="id10" x="-943" y="-1020">
			<name x="-918" y="-1028">SHIFT</name>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="guard" x="-1130" y="-918">check_insensor()==1</label>
			<label kind="synchronisation" x="-1130" y="-901">in_sensor!</label>
			<label kind="assignment" x="-1130" y="-884">x = 0</label>
			<nail x="-1088" y="-926"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="guard" x="-1156" y="-1045">check_insensor()==0</label>
			<label kind="assignment" x="-1113" y="-1062">x = 0</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="guard" x="-1105" y="-1139">x &gt; 5</label>
			<label kind="assignment" x="-1105" y="-1156">shift()</label>
			<nail x="-1088" y="-1113"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-1368" y="-1037">initializer?</label>
		</transition>
	</template>
	<template>
		<name>Sensor</name>
		<parameter>const id_s id</parameter>
		<declaration>bool is_first = true;
clock x;

void update_sensor_status(){
    status_in_sensors[id] = 0;
}</declaration>
		<location id="id11" x="-391" y="-204">
		</location>
		<location id="id12" x="-263" y="-93">
			<name x="-273" y="-127">FREE</name>
		</location>
		<location id="id13" x="433" y="255">
			<name x="450" y="246">BUSY</name>
			<label kind="invariant" x="423" y="272">x &lt;= 5</label>
		</location>
		<location id="id14" x="-263" y="255">
			<name x="-314" y="246">WAIT</name>
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-221" y="195">status_in_sensors[id] == 1 &amp;&amp; status_preprocessing[id] == 0 &amp;&amp; status_stations[id] == 0 &amp;&amp; x &gt;= 0</label>
			<label kind="synchronisation" x="-25" y="221">enter_preprocessing[id]!</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="17" y="17">status_in_sensors[id] == 0</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="8" y="-127">in_sensor?</label>
			<label kind="assignment" x="8" y="-144">x = 0</label>
			<nail x="433" y="-93"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-391" y="51">free_in_sensor[id]?</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-331" y="-178">initializer?</label>
		</transition>
	</template>
	<system>initialization = Initialization();
processing_station1 = Processing_Station(0, 0, 5);
/*processing_station2 = Processing_Station(1, 2);
processing_station3 = Processing_Station(2, 3);
processing_station4 = Processing_Station(3, 0);*/
sensor1 = Sensor(0);
/*sensor2 = Sensor(1);
sensor3 = Sensor(2);
sensor4 = Sensor(3);*/
conveyor_belt = Conveyor_Belt();

system initialization, processing_station1, conveyor_belt, sensor1;</system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
